register usage:
this app conforms to the eabi just enough that we can leverage some of the new
vle context saving instructions fron our irqs

r8-r23 - internal, dedicated for supv/os use

rsp/r1 - dedicated - stack pointer
r24 - dedicated - .bss base pointer
r25 - dedicated - .data base pointer
r26 - dedicated - .rodata base pointer
r0,r2,r3,r4,r5,r6,r7,cr0,lr,ctr,xer - volatile - caller saves before calling another func (callee can freely clobber as desired)
r27,r28,r29,r30,r31,cr2 - non volatile - callee saves before using and caller can depend on their safety through an fcall

typically, r2/r3/r4/r5/r6/r7 are used to pass arguments to the callee, they are also used for return values to caller

typically, caller manages his own stack frame and has no knowledge of how others manage theirs. the only
real rule here is that no one 'reaches back' into the original callers stack frame. align on word boundry.

-------

INTC/ivor4 interrupt handling guidelines:

treat ALL registers except for r2,r3 as non volatile on entry to your handler. this means SAVE everything you're
going to use before blr'ing. the ivor4 handler will make sure r2,r3 is restored before rfi'ing

-------

stack usage guideline:

typically:
e_stwu      rsp, -<4+size_in_bytes>(rsp)
se_stw      ..
se_stw      ..
se_stw      ..

se_lwz      ..
se_lwz      ..
se_lwz      ..
se_lwz      rsp, 0(rsp)

if you can keep frames smaller than 16 bytes, you can use the se_ load/stores for
better size optimization

your frame will always be -(4+) bytes in size because you're always storing the
previous rsp as part of the update operation

NOTICE: the stack ptr update is ATOMIC and done first thing - use of interrupts make
this manditory. Typically, you'll see older ppc code write to 'unclaimed' stack space
before updating the rsp. Not sure why it's done this way, but it's plain old wrong (and
I'm probably missing the context as to why someone would actually do that). I have
never seen it done that way in embedded ppc code at all. We're going to do it the known
safe way.

-------

on system call: try:
r0 - syscall#
r2+ - args to syscall